install.package ("KernSmooth R")
install.packages("KernSmooth R")
install.packages("KernSmooth")
library(KernSmooth)
q()
search()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
div?
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("I think I have got this now")
submit()
submit()
mad_libs(bathroom,shiny,warts)
mad_libs("bathroom","shiny","warts")
submit()
"I" %p% "love" %p% "R!"
source("cube.R")
cube(3)
?if
()
?if
()
?if
help(if)
help(if)
?function
()
library(datasets)
data(iris)
?iris
head(iris)
?gl
dim(iris)
?iris
?uniqe
?unique
unique(iris)
unique(iris$species)
unique(iris$Species)
y<-unique(iris$species)
split(iris,species)
split(iris,y)
y<-unique(iris$Species)
y
split(iris,y)
tail(iris)
iris
split(iris,iris$Species)
tapply(iris,iris$Species,mean)
f<-iris$Species
tapply(iris,f,mean)
tapply(iris,virginica,mean)
lapply(split(iris, iris$Species), mean)
library(datasets)
data(iris)
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?environment
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(1:100, c(0,1), replace=TRUE, prob=c(0.3,0.7))
sample(c(0,1), size=100, replace=TRUE, prob=c(0.3, 0.7))
flips<-sample(c(0,1), size=100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(1)
sum(flips)
?rbinom()
?rbinom
rbinom(1,size=100, prob=0.7)
flips2<-rbinom(1,size=100, prob=0.7)
flips2<-rbinom(n=100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5, mean=10)
?rpois
rpois(n=5,lambda=10)
my_pois<-replicate(100, rpois(5,10))
head(my_pois)
my_pois
cm=colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
swirl()
sample(1:10)
sample(1:10, replace=TRUE)
?pois
?pois()
?rpois
set.seed(1)
rpois(5,2)
?set.seed
set.seed(1)
rpois(5,2)
?rnorm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
d1<- sys.date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
T2<0-as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1886 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
?par
plot(cars, par(col=2))
plot(cars)
plot(cars, col=2)
plot(cars, xlim(C(10:15)))
plot(cars, xlim(c(10:15)))
plot(cars, xlim(c(10,15)))
?xlim
plot(cars, xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
play()
head(mtcars)
summary(mtcars)
str(mtcars)
nxt()
?boxplot
boxplot(data=mtcars, formula=mpg~cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
?aggregate
swirl()
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter (cran, package=="swirl")
filter(cran, r_version=="3.1.1", country =="US")
?Comparison
filter(cran, country=="IN", r_version<="3.0.2")
filter(cran, country="US" | country == "IN")
filter(cran, country=="US" | country=="IN")
filter(cran,size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version==!is.na())
filter(cran, r_Version!=is.na())
filter(cran, r_version!=is.na())
filter(cran,!is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2,country,desc(r_version), desc(ip_id))
arrange(cran2,country,desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_gb = size_mb/2^10)
mutate(cran3, size_gb = size_mb/2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summaraze(cran, avg_bytes=mean(size))
summarize(cran, avg_bytes=mean(size))
setwd("~/GitHub/Coursera-GettingData-Final-Project")
